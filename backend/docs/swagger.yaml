definitions:
  category.CreateCategoryRequest:
    properties:
      color:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/enums.CategoryType'
      user_id:
        type: integer
    type: object
  category.ResponseCategories:
    properties:
      data:
        items:
          $ref: '#/definitions/category.ResponseData'
        type: array
      message:
        type: string
    type: object
  category.ResponseCategory:
    properties:
      data:
        $ref: '#/definitions/category.ResponseData'
      message:
        type: string
    type: object
  category.ResponseData:
    properties:
      color:
        type: string
      createAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      system:
        type: boolean
      title:
        type: string
      type:
        type: string
      updateAt:
        type: string
    type: object
  category.UpdateCategoryRequest:
    properties:
      color:
        type: string
      title:
        type: string
    type: object
  diet.CreateMealRequest:
    properties:
      foods:
        items:
          $ref: '#/definitions/diet.FoodRequest'
        type: array
      hour:
        type: string
      name:
        type: string
      user_id:
        type: integer
    type: object
  diet.FoodRequest:
    properties:
      food_id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      observation:
        type: string
      quantity:
        type: integer
    type: object
  diet.PhotoField:
    properties:
      thumb:
        type: string
    type: object
  diet.ResponseData:
    properties:
      createAt:
        type: string
      deletedAt:
        type: string
      foods:
        items:
          $ref: '#/definitions/diet.ResponseDataFood'
        type: array
      hour:
        type: string
      id:
        type: integer
      name:
        type: string
      updateAt:
        type: string
    type: object
  diet.ResponseDataFood:
    properties:
      food_name:
        type: string
      observation:
        type: string
      photo:
        $ref: '#/definitions/diet.PhotoField'
      quantity:
        type: integer
      tag_id:
        type: integer
    type: object
  diet.ResponseFood:
    properties:
      data:
        $ref: '#/definitions/diet.ResponseDataFood'
      message:
        type: string
    type: object
  diet.UpdateMealRequest:
    properties:
      foods:
        items:
          $ref: '#/definitions/diet.FoodRequest'
        type: array
      hour:
        type: string
      name:
        type: string
    type: object
  enums.CategoryType:
    enum:
    - tasks
    - finances
    type: string
    x-enum-varnames:
    - Tasks
    - Finances
  enums.Frequency:
    enum:
    - daily
    - mondayToFriday
    - weekly
    - monthly
    - yearly
    - unique
    type: string
    x-enum-varnames:
    - Daily
    - MondayToFriday
    - Weekly
    - Monthly
    - Yearly
    - Unique
  finances.CreateTransactionRuleRequest:
    properties:
      category_id:
        type: integer
      end_date:
        type: string
      frequency:
        $ref: '#/definitions/enums.Frequency'
      income:
        type: boolean
      start_date:
        type: string
      title:
        type: string
      user_id:
        type: integer
      value:
        type: number
    type: object
  finances.ResponseData:
    properties:
      category:
        type: string
      color:
        type: string
      confirmed:
        type: boolean
      createAt:
        type: string
      date:
        type: string
      deletedAt:
        type: string
      end_date:
        type: string
      frequency:
        type: string
      id:
        type: integer
      income:
        type: boolean
      start_date:
        type: string
      title:
        type: string
      updateAt:
        type: string
      value:
        type: number
    type: object
  finances.UpdateTransactionRequest:
    properties:
      title:
        type: string
      value:
        type: number
    type: object
  helper.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  home.ResponseDailyData:
    properties:
      data:
        $ref: '#/definitions/home.ResponseData'
      message:
        type: string
    type: object
  home.ResponseData:
    properties:
      meal:
        $ref: '#/definitions/home.ResponseDataMeal'
      tasks:
        items:
          $ref: '#/definitions/home.ResponseDataTasks'
        type: array
    type: object
  home.ResponseDataMeal:
    properties:
      hour:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  home.ResponseDataTasks:
    properties:
      category:
        type: string
      color:
        type: string
      createAt:
        type: string
      date_end:
        type: string
      date_start:
        type: string
      deletedAt:
        type: string
      done:
        type: boolean
      end_time:
        type: string
      frequency:
        type: string
      id:
        type: integer
      priority:
        type: string
      start_time:
        type: string
      title:
        type: string
      updateAt:
        type: string
    type: object
  home.ResponseSearch:
    properties:
      data:
        type: string
      message:
        type: string
    type: object
  tasks.CreateTaskRequest:
    properties:
      category_id:
        type: integer
      date_end:
        type: string
      date_start:
        type: string
      end_time:
        type: string
      frequency:
        type: string
      priority:
        type: string
      start_time:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  tasks.ResponseData:
    properties:
      category:
        type: string
      color:
        type: string
      createAt:
        type: string
      date_end:
        type: string
      date_start:
        type: string
      deletedAt:
        type: string
      done:
        type: boolean
      end_time:
        type: string
      frequency:
        type: string
      id:
        type: integer
      priority:
        type: string
      start_time:
        type: string
      title:
        type: string
      updateAt:
        type: string
    type: object
  tasks.ResponseDataWeekTask:
    properties:
      category:
        type: string
      color:
        type: string
      done:
        type: boolean
      end_time:
        type: string
      id:
        type: integer
      id_task:
        type: integer
      priority:
        type: string
      start_time:
        type: string
      title:
        type: string
    type: object
  tasks.ResponseDateTasks:
    properties:
      tasks:
        items:
          $ref: '#/definitions/tasks.ResponseDataWeekTask'
        type: array
    type: object
  tasks.ResponseTask:
    properties:
      data:
        $ref: '#/definitions/tasks.ResponseData'
      message:
        type: string
    type: object
  tasks.ResponseTaskMap:
    additionalProperties:
      $ref: '#/definitions/tasks.ResponseDateTasks'
    type: object
  tasks.ResponseTasks:
    properties:
      data:
        items:
          $ref: '#/definitions/tasks.ResponseData'
        type: array
      message:
        type: string
    type: object
  tasks.UpdateTaskRequest:
    properties:
      category_id:
        type: integer
      priority:
        type: string
      title:
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      photo:
        type: string
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  user.ResponseData:
    properties:
      createAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      lastLogin:
        type: string
      name:
        type: string
      password:
        type: string
      photo:
        type: string
      updateAt:
        type: string
    type: object
  user.ResponseLogin:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/user.ResponseData'
    type: object
  user.ResponseUser:
    properties:
      data:
        $ref: '#/definitions/user.ResponseData'
      message:
        type: string
    type: object
  user.ResponseUsers:
    properties:
      data:
        items:
          $ref: '#/definitions/user.ResponseData'
        type: array
      message:
        type: string
    type: object
  user.UpdateUserRequest:
    properties:
      name:
        type: string
      photo:
        type: string
    type: object
  workout.CreateWorkoutRequest:
    properties:
      exercises:
        items:
          $ref: '#/definitions/workout.ExerciseWorkoutRequest'
        type: array
      name:
        type: string
      user_id:
        type: integer
    type: object
  workout.ExerciseWorkoutRequest:
    properties:
      exercise_id:
        type: integer
      load:
        type: number
      repetitions:
        type: integer
      rest_seconds:
        type: integer
      series:
        type: integer
      workout_id:
        type: integer
    type: object
  workout.ResponseData:
    properties:
      createAt:
        type: string
      deletedAt:
        type: string
      exercises:
        items:
          $ref: '#/definitions/workout.ResponseDataExercise'
        type: array
      id:
        type: integer
      name:
        type: string
      updateAt:
        type: string
    type: object
  workout.ResponseDataExercise:
    properties:
      body_part:
        type: string
      id:
        type: integer
      instructions:
        type: string
      load:
        type: number
      name:
        type: string
      repetitions:
        type: integer
      rest_seconds:
        type: integer
      series:
        type: integer
    type: object
  workout.ResponseExercises:
    properties:
      data:
        $ref: '#/definitions/workout.ResponseDataExercise'
      message:
        type: string
    type: object
  workout.ResponseWorkout:
    properties:
      data:
        $ref: '#/definitions/workout.ResponseData'
      message:
        type: string
    type: object
  workout.UpdateWorkoutRequest:
    properties:
      exercises:
        items:
          $ref: '#/definitions/workout.ExerciseWorkoutRequest'
        type: array
      name:
        type: string
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.ResponseCategories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get categories
      tags:
      - Category
  /category:
    delete:
      consumes:
      - application/json
      description: Delete a category
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.ResponseCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get one category
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.ResponseCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get category
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: Create a new Category
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/category.CreateCategoryRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.ResponseCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update the title of category
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/category.UpdateCategoryRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/category.ResponseCategory'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - Category
  /daily:
    get:
      consumes:
      - application/json
      description: Info of the day with pending tasks, next meal.
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/home.ResponseDailyData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get daily data
      tags:
      - Home
  /diet/food:
    get:
      consumes:
      - application/json
      description: Search food for a diet
      parameters:
      - description: query
        in: query
        name: search
        required: true
        type: string
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diet.ResponseFood'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Search food
      tags:
      - Diet
  /finances/month:
    get:
      consumes:
      - application/json
      description: Get all transactions of month
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      - description: month
        in: query
        name: month
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finances.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all transactions of month
      tags:
      - Finances
  /finances/transaction:
    delete:
      consumes:
      - application/json
      description: Delete a transaction
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finances.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete transaction
      tags:
      - Finances
    get:
      consumes:
      - application/json
      description: Get one transaction
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finances.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get a transaction
      tags:
      - Finances
    post:
      consumes:
      - application/json
      description: Create a new transaction
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/finances.CreateTransactionRuleRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finances.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create transaction
      tags:
      - Finances
  /finances/transactions:
    get:
      consumes:
      - application/json
      description: Get all transactions
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finances.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all transactions
      tags:
      - Finances
    put:
      consumes:
      - application/json
      description: Update the title or value of transaction
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/finances.UpdateTransactionRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/finances.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a transaction
      tags:
      - Finances
  /login:
    post:
      consumes:
      - application/json
      description: Login and generate token
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Login
      tags:
      - User
  /meal:
    delete:
      consumes:
      - application/json
      description: Delete a meal
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diet.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete meal
      tags:
      - Diet
    get:
      consumes:
      - application/json
      description: Get one meal
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diet.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get meal
      tags:
      - Diet
    post:
      consumes:
      - application/json
      description: Create a new meal
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/diet.CreateMealRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diet.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create meal
      tags:
      - Diet
  /meals:
    get:
      consumes:
      - application/json
      description: Get all meals
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/diet.ResponseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get meals
      tags:
      - Diet
  /search:
    get:
      consumes:
      - application/json
      description: Get info from gpts
      parameters:
      - description: search
        in: query
        name: search
        required: true
        type: string
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/home.ResponseSearch'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Search
      tags:
      - Home
  /task:
    put:
      consumes:
      - application/json
      description: Update task status
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update task status
      tags:
      - Task
  /task/rule:
    delete:
      consumes:
      - application/json
      description: Delete a task and yours status
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Get all info of the task
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get task
      tags:
      - Task
    post:
      consumes:
      - application/json
      description: Create a new task
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/tasks.CreateTaskRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a task
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: Update task rule info
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/tasks.UpdateTaskRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTasks'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update task rule
      tags:
      - Task
  /tasks/rules:
    get:
      consumes:
      - application/json
      description: Get all tasks user
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTasks'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tasks
      tags:
      - Task
  /tasks/week:
    get:
      consumes:
      - application/json
      description: A map that associates dates (in string format) with ResponseDateTasks.
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      - description: currentDate
        in: query
        name: currentDate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.ResponseTaskMap'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tasks of week
      tags:
      - Task
  /user:
    delete:
      consumes:
      - application/json
      description: Delete a User
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseUsers'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new User
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      summary: Create user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ResponseUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user
      tags:
      - User
  /workout:
    delete:
      consumes:
      - application/json
      description: Delete a workout
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.ResponseWorkout'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete workout
      tags:
      - Workout
    get:
      consumes:
      - application/json
      description: Get one workout
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.ResponseWorkout'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get workout
      tags:
      - Workout
    post:
      consumes:
      - application/json
      description: Create a new workout
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/workout.CreateWorkoutRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.ResponseWorkout'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create workout
      tags:
      - Workout
    put:
      consumes:
      - application/json
      description: Update the name and exercises of workout
      parameters:
      - description: id
        in: query
        name: id
        required: true
        type: integer
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/workout.UpdateWorkoutRequest'
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.ResponseWorkout'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update workout
      tags:
      - Workout
  /workout/exercises:
    get:
      consumes:
      - application/json
      description: Get all exercises
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.ResponseExercises'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get exerciser
      tags:
      - Workout
  /workouts:
    get:
      consumes:
      - application/json
      description: Get all workouts
      parameters:
      - description: Access token
        in: header
        name: x-access-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.ResponseWorkout'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/helper.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get workouts
      tags:
      - Workout
swagger: "2.0"
